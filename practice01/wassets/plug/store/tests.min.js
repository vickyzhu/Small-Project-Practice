tests={outputError:null,assert:assert,runFirstPass:runFirstPass,runSecondPass:runSecondPass,failed:!1};function assert(a,b){a||(tests.outputError("bad assert: "+b),store.disabled&&tests.outputError("\x3cbr\x3eNote that store.disabled \x3d\x3d true"),tests.failed=!0)}function runFirstPass(){store.clear();store.get("unsetValue");store.set("foo","bar");assert("bar"==store.get("foo"),"stored key 'foo' not equal to stored value 'bar'");store.remove("foo");assert(null==store.get("foo"),"removed key 'foo' not null");assert(!1==store.has("foo"),"key 'foo' exists when it shouldn't");assert("value"==store.set("foo","value"),"store#set returns the stored value");assert(!0==store.has("foo"),"key 'foo' doesn't exist when it should");store.set("foo","bar1");store.set("foo","bar2");assert("bar2"==store.get("foo"),"key 'foo' is not equal to second value set 'bar2'");store.set("foo","bar");store.set("bar","foo");store.remove("foo");assert(!1==store.has("foo"),"key 'foo' exists when it shouldn't");assert("foo"==store.get("bar"),"removing key 'foo' also removed key 'bar'");store.set("foo","bar");store.set("bar","foo");store.clear();assert(null==store.get("foo")&&null==store.get("bar"),"keys foo and bar not cleared after store cleared");assert(123==store.get("defaultVal",123),"store.get should return default value");store.transact("foosact",function(a){assert("object"==typeof a,"new key is not an object at beginning of transaction");a.foo="foo"});store.transact("foosact",function(a){assert("foo"==a.foo,"first transaction did not register");a.bar="bar"});assert("bar"==store.get("foosact").bar,"second transaction did not register");store.set("foo",{name:"marcus",arr:[1,2,3]});assert("object"==typeof store.get("foo"),"type of stored object 'foo' is not 'object'");assert(store.get("foo")instanceof Object,"stored object 'foo' is not an instance of Object");assert("marcus"==store.get("foo").name,"property 'name' of stored object 'foo' is not 'marcus'");assert(store.get("foo").arr instanceof Array,"Array property 'arr' of stored object 'foo' is not an instance of Array");assert(3==store.get("foo").arr.length,"The length of Array property 'arr' stored on object 'foo' is not 3");assert(store.enabled=!store.disabled,"Store.enabled is not the reverse of .disabled");store.remove("circularReference");var a={};a.two={one:a};var b=!1;try{store.set("circularReference",a)}catch(c){b=!0}assert(b,"storing object with circular reference did not throw");assert(!store.get("circularReference"),"attempting to store object with circular reference which should have faile affected store state");if("undefined"!=typeof localStorage){a={"int":42,bool:!0,"float":3.141592653,string:"Don't Panic",odd_string:"{ZYX'} abc:;::)))"};for(key in a)localStorage[key]=a[key];for(key in a)assert(store.get(key)==a[key],key+" was not correctly promoted to valid JSON"),store.remove(key)}store.set("firstPassFoo","bar");store.set("firstPassObj",{woot:!0});a=store.getAll();assert("bar"==a.firstPassFoo,"getAll gets firstPassFoo");assert(4==countProperties(a),"getAll gets all 4 values")}function runSecondPass(){assert("bar"==store.get("firstPassFoo"),"first pass key 'firstPassFoo' not equal to stored value 'bar'");var a=store.getAll();assert("bar"==a.firstPassFoo,"getAll still gets firstPassFoo on second pass");assert(4==countProperties(a),"getAll gets all 4 values");store.clear();assert(null==store.get("firstPassFoo"),"first pass key 'firstPassFoo' not null after store cleared");a=store.getAll();assert(0==countProperties(a),"getAll returns 0 properties after store.clear() has been called")}function countProperties(a){var b=0,c;for(c in a)a.hasOwnProperty(c)&&b++;return b};